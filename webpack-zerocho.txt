zerocho 블로그 웹팩4 정리
-basic( *****핵심- entry, output, module, plugins)
  -기본예시
    const webpack = require('webpack');
    module.exports = {
      mode: 'development',
      entry: {
        app: '',
      },
      output: {
        path: '',
        filename: '',
        publicPath: '',
      },
      module: {

      },
      plugins: [],
      optimization: {},
      resolve: {
        modules: ['node_modules'],
        extensions: ['.js', '.json', '.jsx', '.css'],
      },
    };

  entry에서 시작해서 loader과 plugin의 가공 과정을 거쳐 output으로 나오는 거

  웹팩4부터는 webpack-cli 같이 설치해야 명령어 사용 가능
  파일명은 기본으로 webpack.config.js.
  이름을 다르게 하고싶다면 실행시 webpack --config 경로/webpack.config.prod.js
  package.json의 script 확인. 따로 스크립트 파일로 빼는 경우도 있다.

  -resolve
    웹팩이 알아서 경로나 확장자를 처리할 수 있게 도와주는 옵션
    module에 node_modules를 넣어야 디렉토리의 노드모듈 인식.
    extentions에 넣은 확장자는 웹팩에서 알아서 처리하기때문에 파일에 확장자 입력할 필요 없어짐.

  -mode 
    웹팩4에서 추가. devalopd면 개발,product는 배포용.
    배포용일 경우 알아서 최적화 적용된다. 따라서 기존 최적화 플러그인들이 대량으로 호환안됨(?)
    *웹팩3에선 config 파일에서 mode와 optimization을 뺀다.

  *****핵심- entry, output, module, plugins

  -entry
    웹팩 파일을 읽어들이기 시작하는 부분.
    app이 기본키로 설정. 이름은 자유롭게 변경 가능.
    app 이면 결과물은 app.js, viper면 viper.js로 나온다.

    키를 app:'파일경로', viper:'파일경로' 로 하면 app.js, viper.js 두개로 생성된다.
    보통 멀티페이지에서 엔트리를 여러개 넣어준다.

    하나의 entry에 여러 파일을 넣을때는 배열을 사용
    entry: {
        app: ['a.js', 'b.js'],
    },
    a와 b를 한 파일로 엮어 app.js로 결과물이 나온다. 
    이렇게 웹팩은 entry의 js파일부터 import, require로 묶어진 다른js까지 알아서 파악뒤
    entry의 키 개수만큼 묶어 나온다.

    js 파일 대신 npm 모듈을 넣기도 가능. 
    보통 @babel/polyfill이나 eventsource-polyfill같은 것들을 적용
    {
      entry: {
        vendor: ['@babel/polyfill', 'eventsource-polyfill', 'react', 'react-dom'],
        app: ['@babel/polyfill', 'eventsource-polyfill', './client.js'],
      },
    } (리액트의 예)app.js와 vendor.js가 결과물로 나옴.
    이렇게 하면 각각의 엔트리가 polyfill들이 적용된 상태로 output.(IE폴리필 적용)

  -output
    {
      output: {
        path: '/dist',
        filename: '[name].js',
        publicPath: '/',
      },
    }
    (path와 publicPath 헷갈리지 않기.)
    path: 는 output으로 나올 파일이 저장될 경로.
    publicPath: 는 파일들이 위치할 서버 상의 경로.(express.static의 경로와 비슷한 개념)
    *filename: '[name].js' 의 [name]에  'entry의 키 이름' 으로 결과물이 나옴. 다른 옵션으로,
                [hash]는 매번 웹팩 컴파일 시 랜덤한 문자열을 붙인다.따라서 캐시를 삭제할때 유용.
                [chunkhash]는 파일이 달라질 때에만 랜덤으로 값이 바뀜. 이것을 사용하면 변경되지 않은
                파일은 캐싱하고 변경된 파일만 새로 불러올수 있다.

  -module의 rules[]
  -loader
    **loader 대신 여러개의 로더를 동시에 사용할 때는 use 사용.
      loader는 연달아 사용 가능 babel-loader처럼 하나로 사용할 수도 있지만,
      나중에 less-loader, sass-loader, postcss-loader과 함께 세 네개를 동시에 사용하기도 함
      css-loader로 처리한 뒤 그것을 style-loader로 한 번 더 처리하는 겁니다.

    (이제부터 막강한 웹팩의 기능). 
    바벨과 같은 ES2015 이상의 문법을 IE와 호환시키기 위함과 jsx 같은 문법을 컴파일하기 위함.
    
    * npm i -D babel-loader @babel/core @babel/preset-env @babel/preset-react @babel/preset-stage-0
    babel-loader와 babel-core는 필수, 나머지 preset은 선택. react도 선택
    env는 브라우저에 필요한 ES버전을 자동으로 파악해서 알아서 폴리필을 넣어준다(막강,놀라움).
    stage-0은 env보다 더 실험적인 최신기술을 위한 프리셋.
    (바벨에 대해서 더 알아보기)

    babel-loader의 options:{}
      options로 presets: [ ['@babel/preset-env', {} ], @babel/preset-xxx,@babel... ] 로 prese 설정
      * preset-env는 조금 독특한데, target와 modules 라는 option의 option 이라고 할수있다.
        modules를 false로 해야 '트리 쉐이킹'이 된다.(es2015 모듈시스템의 import되지 않은 export 정리.꼭사용!!)
        단, commonJS나 AMD, UMD같은 모듈 시스템을 사용해야하는 클라이언트에서는 쓰면 제대로 처리되지 않는다.
            {
              module: {
                rules: [{
                  test: /\.jsx?$/,
                  loader: 'babel-loader',
                  options: {
                    presets: [
                      [
                        '@babel/preset-env', {
                          targets: { node: 'current' }, // 노드일 경우만
                          modules: 'false'
                        }
                      ],
                      '@babel/preset-react',
                      '@babel/preset-stage-0'
                    ],
                  },
                  exclude: ['/node_modules'],
                }],
              },
            }
      * rules나 use 대신 loaders를 쓰고, options 대신 query를 쓴다면 웹팩1. 이제는 그러면 에러난다.(2부터 바뀜)
      클라이언트 처리는 다른거 참고. 위는 서버예시

      * 위와 같이 하면 test 정규식조건(js나 jsx 파일)에 부합하는 파일들을 loader에 지정한 로더가 컴파일 해줌
      * options는 로더에 대한 옵션으로 아까 설치한 presets들을 적용
      * exclude는 제외할 폴더나 파일로, 바벨로 컴파일하지 않을 것들을 지정해줍니다. 바벨로는 컴파일하지 않지만 웹팩으로는   컴파일함
      * include는 반대로 꼭 이 로더를 사용해서 컴파일할 것들을 지정해줄 수도 있습니다.

  -plugin
    약간 부가적인 기능. 다양한 플러그인을 활용하면 효과적 번들링을 함
    예를 들어 압축, 핫리로딩, 파일 복사 등 부수적인 작업을 할 수 있다.
    다양한 패키지로 존재하기에 쇼핑하듯 고를수 있다.
    {
      plugins: [
        new webpack.LoaderOptionsPlugin({
          minimize: true,
        }),
        new webpack.DefinePlugin({
          'process.env.NODE_ENV': JSON.stringify('production'), // 아래 EnvironmentPlugin처럼 할 수도 있습니다.
        }),
        new webpack.EnvironmentPlugin(['NODE_ENV']), // 요즘은 위의 DefinePlugin보다 이렇게 하는 추세입니다.
      ],
    }
    대표적인 웹팩 기본 제공 플러그인
    LoaderOptionsPlugin: 로더들에게 옵션을 넣어주는 플러그인
    DefinePlugin: JS 변수를 치환해주는 플러그인입니다. 

    이외에도 BannersPlugin, IgnorePlugin, EnvironmentPlugin, ContextReplacementPlugin 등 기본 제공 플러그인도 어마어마합니다

    *웹팩3에서 플러그인들의 변경점이 있습니다. DedupePlugin은 사라졌고, OccurrenceOrderPlugin은 기본으로 켜져 있으니 더 이상 추가하지 마세요.

    *웹팩4에서는 ModuleConcatenationPlugin과 UglifyJsPlugin, NoEmitOnErrorsPlugin, NamedModules 플러그인이 모두 사라지고 wepback.config.js에 optimization 속성으로 대치되었습니다.

  -optimization
  웹팩4에서 최적화 관련 플러그인들이 모두 이쪽 속성으로 통합.
  나중에 나오는 CommonsChunkPlugin도 사라지고 여기에 병합.
  {
    optimization: {
      minimize: true/false,
      splitChunks: {},
      concatenateModules: true,
    }
  }
  예) minimize가 UglifyJsPlugin을 계승
  splitChunks가 CommonsChunkPlugin을 계승
  mode가 production일 때는 자동으로 이 두 속성이 켜짐
  concatenateModules 옵션은 ModuleConcatenationPlugin을 계승.

  *플러그인은 일단 추가하고 보시면 됩니다. 에러가 나면 빼고요. 웹팩 3에서는 배포 환경일 때 ModuleConcatenationPlugin과 UglifyJsPlugin 다시 넣어주셔야 합니다.





-웹팩4로 CSS와 기타 파일 번들링하기
  -인스톨
    npm i -D style-loader css-loader extract-text-webpack-plugin@next (마지막건  @next로 해야 웹팩4에서 사용가능
    
  css-loader: css파일들을 읽어주고
  style-loader: 읽은 css 파일들을 style 태그로 만들어 head 태그 안에 넣어준다.
  extract-text-webpack-plugin: style 태그 대신 css파일로 만들고 싶은 경우.(@next로 해야 웹팩4에서 사용가능)

  -css를 style 태그로 만들기
    {
      module: {
        rules: [{
          // 전 시간 babel-loader
        }, {
          test: /\.css$/,
          use: ['style-loader', 'css-loader'],
        }],
      }
    }
    이제 entry의 js파일 상단에서 require('app.css');를 하면 알아서 읽어서 style 태그로 만들어줌.


  -따로 css파일 만들기
    style-loader를 대체하지만 플러그인인만큼 module과 plugins에 모두 써줘야 합니다.
    {
      module: {
        rules: [{
          // 전 시간 babel-loader
        }, {
          test: /\.css$/,
          use: ExtractTextPlugin.extract({
            fallback: 'style-loader',
            use: 'css-loader'
          }),
        }],
      },
      plugins: [
        // 기타 플러그인
        new ExtractTextPlugin({
          filename: 'app.css',
        });
      ]
    }
    fallback은 이 플러그인이 실패했을 때 대안으로 style-loader가 작동함을 의미.
    안의 use는 css-loader를 거친 후 extract-text-webpack-plugin으로 파일을 추출하겠다는 뜻

    이제 webpack을 실행하면 output에서 설정한 path 경로에 app.css라는 파일이 생겼을 겁니다. 
    그 파일을 기존에 css를 넣던 방식대로 link 태그로 head에 넣어주면 됩니다.

    참고로 서버 사이드에서 사용할 때는 style-loader와 css-loader 대신 css-loader/locals로 적어주면 됩니다. 
    서버는 css를 지원하지 않기 때문에 다르게 사용해야 합니다.
    여기서 에러가 많이 나는데 절대로 style-loader를 넣어서는 안 됩니다! style-loader는 서버 사이드 렌더링을 지원하지 않습니다.

    더 나아가 css modules(css-loader?modules)나 postcss(postcss-loader)를 사용할 수도 있다.

  -기타 파일 번들링 방법
    먼저 추가적인 로더 설치
    npm i -D file-loader url-loader

    file-loader: 특정 파일을 그대로 내보내줍니다.
    url-loader: 설정한 사이즈보다 작은 이미지나 폰트 파일을 base64 인코딩하여 인라인화(data-uri라고도 함)
                -작은 파일은 따로 http 요청을 하느니 그냥 문자열로 인코딩해서 불러오겠다는 고육지책.
                -원래라면 이미지 주소를 써야할 곳에 data:image/타입;base64, 이렇게 한 후 인코딩한 문자열들을 넣어주면 브라우저가 이미지로 인식
    {
      module: {
        rules: [{
          ... // 바벨로더와 css 로더들
        }, {
          test: /\.(ico|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
          loader: 'url-loader',
          options: {
            name: '[hash].[ext]', //name, hash 등을 쓸수있고 ext는 확장자를 그대로 하겠다는 뜻
            limit: 10000, //바이트 단위보다 작은 파일을 인코딩하겠다.
          },
        }],
      }
    }
    -limit보다 큰 파일은 알아서 file-loader가 처리하여 파일로 내보내주기 때문에 name을 설정하는 것
    -js 파일에서 require('./이미지경로/zero.png');같이 하면 알아서 인라인화하거나 파일로 만들고 경로도 알아서 연결해쥼
    -리액트의 경우 <img src={require('이미지경로')} /> 보통 이렇게 사용

    -이미지나 폰트 외의 다른 파일(html, jade, pug, ejs)은 각각에 해당하는 로더가 다 있기 때문에 그걸 사용하시면 됩니다. 역시 import나 require을 하면 알아서 웹팩이 다 해결해줍니다. 웹팩 만세!


-코드 스플리팅
  

